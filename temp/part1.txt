import { useCallback, useEffect, useState } from "react";
import { useLocation } from "wouter";
import { useQueryClient } from "@tanstack/react-query";
import { Loader2 } from "lucide-react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";

import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { useToast } from "@/hooks/use-toast";
import { apiRequest } from "@/lib/queryClient";
import { useAssessmentCreateModal } from "@/hooks/use-assessment-create-modal";

interface Survey {
  id: number;
  title: string;
  description: string;
  status: string;
  version: string;
}

// Type definition for selected team
interface TeamWithRole {
  id: number;
  name: string;
  role: string;
  createdAt: Date;
  updatedAt: Date;
}

const createAssessmentFormSchema = z.object({
  title: z
    .string()
    .min(3, "Title must be at least 3 characters")
    .max(100, "Title must be less than 100 characters"),
  surveyTemplateId: z.string().refine((val) => !isNaN(parseInt(val)), {
    message: "Please select a survey template",
  }),
});

type CreateAssessmentFormValues = z.infer<typeof createAssessmentFormSchema>;

export function AssessmentCreateModal() {
  const assessmentCreateModal = useAssessmentCreateModal();
  const [isLoading, setIsLoading] = useState(false);
  const [surveys, setSurveys] = useState<Survey[]>([]);
  const [isSurveysLoading, setIsSurveysLoading] = useState(true);
  const { toast } = useToast();
  const [, navigate] = useLocation();
  const queryClient = useQueryClient();
  const [selectedTeam, setSelectedTeam] = useState<TeamWithRole | null>(null);

  // Load selected team from localStorage whenever the modal opens
  useEffect(() => {
    // Only load team when the modal is opened
    if (assessmentCreateModal.isOpen) {
      const savedTeam = localStorage.getItem("selectedTeam");
      if (savedTeam) {
        try {
          setSelectedTeam(JSON.parse(savedTeam));
        } catch (e) {
          console.error("Error parsing saved team:", e);
          setSelectedTeam(null);
        }
      } else {
        setSelectedTeam(null);
      }
    }
  }, [assessmentCreateModal.isOpen]);

  const form = useForm<CreateAssessmentFormValues>({
    resolver: zodResolver(createAssessmentFormSchema),
  });

  // Define the fetchSurveys function using useCallback to avoid dependency cycles
  const fetchSurveys = useCallback(async () => {
    // First clear any existing surveys to avoid stale data
    setSurveys([]);
    setIsSurveysLoading(true);
    
    try {
      // Get the teamId from localStorage, or use 0 for global surveys
      const teamId = selectedTeam?.id || 0;
      console.log(`Fetching surveys for team ID: ${teamId}`);
      
      let data: any = null;
      
      try {
        // Attempt to fetch team surveys first
        console.log(`Attempting to fetch surveys for team: ${teamId}`);
        const response = await fetch(`/api/surveys/${teamId}`, {
          headers: {
            "Authorization": `Bearer ${localStorage.getItem("token")}`
          }
        });
        
        // If we get a 403 error, try fetching global surveys instead
        if (response.status === 403) {
          console.warn(`Access denied for team ${teamId}, falling back to global surveys`);
          
          // Try global surveys as fallback
          console.log("Fetching global surveys as fallback");
          const globalResponse = await fetch("/api/surveys/0", {
            headers: {
              "Authorization": `Bearer ${localStorage.getItem("token")}`
            }
          });
          
          if (!globalResponse.ok) {
            throw new Error(`Failed to fetch global surveys: ${globalResponse.status}`);
          }
          
          data = await globalResponse.json();
          console.log("Successfully fetched global surveys as fallback");
        } else if (!response.ok) {
          throw new Error(`Failed to fetch surveys: ${response.status}`);
        } else {
          // Process the normal response
          data = await response.json();
          console.log(`Successfully fetched surveys for team ${teamId}`);
        }
      } catch (error) {
        console.error("Network error fetching surveys:", error);
        throw error; // Re-throw to be caught by outer try/catch
      }

      if (data && data.success) {
        // Filter published surveys
        const filteredSurveys = data.surveys.filter(
          (survey: Survey) => survey.status === "public",
        );

        console.log(`Found ${filteredSurveys.length} published surveys`);
        setSurveys(filteredSurveys);
      } else {
        console.error("API returned error:", data?.message || "Unknown error");
        toast({
          title: "Error",
          description: data?.message || "Failed to load survey templates",
          variant: "destructive",
        });
        // Reset surveys to empty array on error
        setSurveys([]);
      }
    } catch (error: any) {
      console.error("Error fetching surveys:", error.message || error);
      toast({
        title: "Error",
        description: error.message || "Failed to load survey templates",
        variant: "destructive",
      });
      // Reset surveys to empty array on error
      setSurveys([]);
    } finally {
      setIsSurveysLoading(false);
    }
  }, [toast, selectedTeam]);

  // Use the modal open state to trigger data loading
  useEffect(() => {
    const fetchTeamAndSurveys = async () => {
      if (assessmentCreateModal.isOpen) {
        try {
          // Refresh the team context to ensure we have the latest team ID
          const teamsResponse = await fetch("/api/teams", {
            headers: {
              "Authorization": `Bearer ${localStorage.getItem("token")}`
            }
          });
          
          if (teamsResponse.ok) {
            const teamsData = await teamsResponse.json();
            console.log("Refreshed teams data:", teamsData);
            
            // Check localStorage for selected team
            const storedTeamId = localStorage.getItem("selectedTeam");
            if (storedTeamId) {
              try {
                const selectedTeamData = JSON.parse(storedTeamId);
                console.log("Using selected team from localStorage:", selectedTeamData);
                
                // Verify this team still exists in the user's teams
                const teamExists = teamsData.teams.some(
                  (team: { id: number }) => team.id === selectedTeamData.id
                );
                
                if (!teamExists) {
                  console.warn("Selected team no longer exists in user's teams, clearing selection");
                  localStorage.removeItem("selectedTeam");
                }
              } catch (e) {
                console.error("Error parsing selected team:", e);
                localStorage.removeItem("selectedTeam");
              }
            }
          }
          
          // Now fetch surveys with the refreshed team context
          fetchSurveys();
        } catch (error) {
          console.error("Error refreshing team data:", error);
          // Still try to fetch surveys with existing team context
          fetchSurveys();
        }
      }
    };
    
    // Call the function when the modal opens
    if (assessmentCreateModal.isOpen) {
      fetchTeamAndSurveys();
    }
  }, [assessmentCreateModal.isOpen, toast, selectedTeam, fetchSurveys]);

  const onSubmit = async (values: CreateAssessmentFormValues) => {
    setIsLoading(true);

    try {
      // Make sure we have a team selected before creating the assessment
      if (!selectedTeam) {
        toast({
          title: "Error",
          description: "No team selected. Please select a team first.",
          variant: "destructive",
        });
        setIsLoading(false);
        return;
      }

      console.log(`Creating assessment for team: ${selectedTeam.id} (${selectedTeam.name}), survey: ${values.surveyTemplateId}`);
      
      const response = await apiRequest("POST", "/api/assessments", {
        title: values.title,
        surveyTemplateId: parseInt(values.surveyTemplateId),
      });

      const data = await response.json();

      if (!response.ok) {
        console.error("Error response:", data);
        throw new Error(data.message || "Failed to create assessment");
      }

      // Invalidate assessments query to refresh the list
      queryClient.invalidateQueries({ queryKey: ["/api/assessments"] });

      // Close the modal
      assessmentCreateModal.onClose();

      // Reset the form
      form.reset();

      // Navigate to the assessment page
      navigate(`/dashboard/assessments/${data.assessment.id}`);

      toast({
        title: "Success",
        description: "Assessment created successfully",
      });
    } catch (error: any) {
      console.error("Error creating assessment:", error);
      
      // Provide specific error message to the user
      toast({
        title: "Error",
        description: 
          error instanceof Error
            ? error.message
            : "Failed to create assessment. Please try again.",
        variant: "destructive",
      });
      
      // If the error is related to team access, let's refresh the team data
      if (error.message && error.message.includes("access to this team")) {
        // Refresh localStorage team data
        const savedTeam = localStorage.getItem("selectedTeam");
        if (savedTeam) {
