Now I need to implement backend authentication and user storage using Replit's backend environment.

Refer to the official Replit docs for structure:
https://docs.replit.com/getting-started/intro-replit

🔧 Stack Assumptions:
Use Replit DB for storage (key-value).

Use Node.js + Express.js for API server.

Authentication will be email/password only (no third-party OAuth for now).

Do not change the frontend design — this is backend-only work.

📂 Backend Directory Setup (inside Replit project)
Create a server.js or index.js file for the backend entry.

Install necessary dependencies:

bash
Copy
Edit
npm install express bcryptjs jsonwebtoken body-parser cors repl.it-db
🗂️ Replit DB Setup
Store users as objects keyed by email.

Example structure:

json
Copy
Edit
{
  "email": "user@example.com",
  "name": "John Doe",
  "company": "MyZone AI",
  "industry": "Technology",
  "employees": "50-149",
  "passwordHash": "$2a$10$hashed...",
  "createdAt": "2025-05-07T12:34Z"
}
🛠️ API Endpoints to Implement
POST /api/signup

Accepts name, email, company, password, etc.

Hashes password with bcryptjs.

Stores the user in Replit DB.

Returns JWT token.

POST /api/login

Accepts email + password.

Verifies password.

Returns JWT token if successful.

GET /api/user

Protected route.

Verifies JWT and returns user data.

PUT /api/user

Allows name or password update.

Email is immutable.

Password requires confirmation.

🔐 Auth Flow
Use jsonwebtoken for token generation and verification.

Store JWT in frontend localStorage (handled in frontend, not part of this prompt).

Protect /api/user and /api/user PUT routes with token middleware.

⚠️ Important Notes
All API routes should be CORS-enabled.

Do not include frontend components or modify UI.

Assume frontend is already built and only needs API to plug into.

Ensure clean error handling and proper status codes (e.g., 409 on duplicate signup, 401 on login failure).

📤 Export
Return the complete server.js backend file and mention any .env variables required (e.g., JWT_SECRET).

Do not touch or suggest changes to any frontend styling, routes, or design. This is backend logic only.