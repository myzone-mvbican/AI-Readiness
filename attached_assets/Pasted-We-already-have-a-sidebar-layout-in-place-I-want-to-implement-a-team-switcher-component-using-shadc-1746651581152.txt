We already have a sidebar layout in place. I want to implement a team switcher component using shadcn/ui (as shown in this example image) and add role-based UI logic for administrators.

🎛 1. Replace Logo with Team/Account Switcher
In the sidebar (currently showing just a logo at the top), replace the logo with the shadcn Combobox component styled like the "Teams" switcher in the image.

Each user may belong to one or more accounts (for now, mock this with an array of teams).
Example:

ts
Copy
Edit
const teams = [
  { id: '1', name: 'Acme Inc', role: 'client' },
  { id: '2', name: 'Acme Corp.', role: 'admin' },
  { id: '3', name: 'Evil Corp.', role: 'client' },
];
On selection, store the active team in local state or global context.

Show the selected team name in the sidebar.

Do not change sidebar layout or styling — only replace the logo section with this.

🔐 2. Admin Permissions via Secure Email List
Define a secure list of admin emails (e.g., stored server-side in .env or via Replit DB).

Example list (server-side):

js
Copy
Edit
const ADMIN_EMAILS = ['admin@myzone.ai', 'founder@myzone.ai'];
On login or token decode, determine whether the current user is an admin by checking their email against the list.

Store this role: "admin" | "client" in the JWT or return it via /api/user.

On frontend, use that to conditionally render admin-only UI elements.

🧭 3. Conditional Sidebar Menu (Admin Only)
In the sidebar nav list, add a new item:

Surveys → routes to /dashboard/surveys

This link should only be visible if the user has role "admin".

Do not render it for client users.

Use shadcn/ui NavigationMenu.Item or existing link style.

⚙️ Integration Notes
Do not change visual design or existing layout beyond the top “logo” space.

Do not affect routes or logic unrelated to the sidebar/account roles.

Do not hardcode admin flags on the frontend — determine it from backend response or token.

🔒 Backend Responsibilities
On signup/login (/api/signup, /api/login), check if the user's email is in the admin list.

Include role in the JWT payload or respond with role in GET /api/user.

Example JWT payload:

json
Copy
Edit
{
  "email": "admin@myzone.ai",
  "role": "admin"
}
No role-editing should be done client-side.

The result should be a seamless user/team switcher in the sidebar, with backend-controlled admin role support and a conditional “Surveys” menu item — all while respecting the current visual design and existing route architecture.